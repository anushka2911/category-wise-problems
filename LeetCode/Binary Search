Question 1) Find First and Last Position of Element in Sorted Array

Description:Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Link:https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

SOLUTION
APPROACH:
Algorithm Used:Binary Search
Time Complexity of Binary Search:O(log n)

CODE:


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {

        int low=0,high=nums.size()-1,mid,start=-1,end=-1;
//start and end variables will be storing first index of the target value and last index of target value respectively
//start and end is initialized to (-1) because,if target is not present in the array we return [-1,-1] 
        vector<int>ans;
 //Start Index i.e. First Occurence
while(low<=high)
{
    mid=low+(high-low)/2; //to avoid overflow
    if(nums[mid]==target)  //if nums[mid] is equal to target value then,
    {
        start=mid;//store mid in "start" as it can be a possible index of first occurence of target value
        high=mid-1;//now we check on LHS for target value
    }
    else if(nums[mid]<target)
        low=mid+1;
    else if(nums[mid]>target)
        high=mid-1;
}


//similarly for end index i.e. last occurence
low=0;
high=nums.size()-1;
while(low<=high)
{
    mid=low+(high-low)/2;
    
    if(nums[mid]==target)
    {
        end=mid;//store mid in "end" as it can be a possible index of last occurence of target value
        low=mid+1;//Check on RHS for target value
    }
    else if(nums[mid]<target)
        low=mid+1;
    else if(nums[mid]>target)
        high=mid-1;
}
//Push Back start and end in ans
        ans.push_back(start);
        ans.push_back(end);
        
        return ans;
        
    }
};
